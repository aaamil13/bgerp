<?php
error_reporting(E_ALL & ~E_NOTICE);

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-04-23 at 16:40:09.
 */

require EF_APP_PATH . '/pear/Vcard.class.php';

class pear_VcardTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var array
     */
    protected $vcards;

    /**
     * @var pear_Vcard
     */
    protected $vcard;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->vcards = pear_Vcard::parseFile(__DIR__ . '/contacts.vcf');
        $this->vcard  = $this->vcards[0];
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }



    /**
     * @covers pear_Vcard::parseFile
     */
    public function testParseFile()
    {
        $this->assertInternalType('array', $this->vcards);
        $this->assertInstanceOf('pear_Vcard', $this->vcard);
    }

    /**
     * @covers pear_Vcard::getVersion
     */
    public function testGetVersion()
    {
        $actual = $this->vcard->getVersion();

        $this->assertEquals('3.0', $actual);
    }

    /**
     * @covers pear_Vcard::getRevision
     */
    public function testGetRevision()
    {
        $actual = $this->vcard->getRevision();

        $this->assertEquals('2008-04-24 19:52:43', date('Y-m-d H:i:s', $actual));
    }

    /**
     * @covers pear_Vcard::getFormattedName
     */
    public function testGetFormattedName()
    {
        $actual = $this->vcard->getFormattedName();

        $this->assertEquals('Banchovski', $actual);
    }

    /**
     * @covers pear_Vcard::getName
     */
    public function testGetName()
    {
        $actual = $this->vcard->getName();

        $expected = array(
            'surname'    => '',
            'given'      => 'Banchovski',
            'additional' => '',
            'prefix'     => '',
            'suffix'     => '',
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers pear_Vcard::getName
     */
    public function testGetNamePart()
    {
        $this->assertEquals('', $this->vcard->getName('surname'));
        $this->assertEquals('Banchovski', $this->vcard->getName('given'));
        $this->assertEquals('', $this->vcard->getName('additional'));
        $this->assertEquals('', $this->vcard->getName('prefix'));
        $this->assertEquals('', $this->vcard->getName('suffix'));
    }

    /**
     * @covers pear_Vcard::getPhotoUrl
     */
    public function testGetPhotoUrl()
    {
        $actual = $this->vcard->getPhotoUrl();

        $expected = array(
            0 => 'http://www.example.com/dir_photos/my_photo.gif',
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers pear_Vcard::getBday
     */
    public function testGetBday()
    {
        $actual = $this->vcard->getBday('Y-m-d H:i:s');

        $this->assertEquals('1953-10-15 23:10:00', $actual);
    }

    /**
     * Извиличане на всички телефони от всички типове
     *
     * @covers pear_Vcard::getTel
     */
    public function testGetTel()
    {
        $actual = $this->vcard->getTel();

        $expected = array(
            'cell' => array(
                0 => '0887956609',
                1 => '0887221229',
            ),
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * Извличане на телефоните от конкретен тип
     *
     * @covers pear_Vcard::getTel
     */
    public function testGetTelByType()
    {
        $actual = $this->vcard->getTel('cell');

        $expected = array(
            0 => '0887956609',
            1 => '0887221229',
        );

        $this->assertEquals($expected, $actual);

        // Когато няма описани телефони от даден тип връща празен масив
        $actual = $this->vcard->getTel('missing');
        $expected = array();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Извличане на телефоните от няколко конкретени типа
     *
     * @covers pear_Vcard::getTel
     */
    public function testGetTelByTypes()
    {
        $actual = $this->vcard->getTel('cell,home');

        $expected = array(
            'cell' => array(
                0 => '0887956609',
                1 => '0887221229',
            ),
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * Извличане на всички имейли от всички типове
     *
     * @covers pear_Vcard::getEmails
     */
    public function testGetEmail()
    {
        $actual = $this->vcard->getEmails();

        $expected = array(
            'home' => array(
                0 => 'boshag@example.com'
            ),
            'work' => array(
                0 => 'boshag@example.com'
            ),
            'pref' => array(
                0 => 'boshag@ciaweb.net'
            ),
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * Имейл адрес без посочен тип
     *
     * @covers pear_Vcard::getEmails
     */
    public function testGetEmailNoType()
    {
        $actual = $this->vcards[2]->getEmails();

        $expected = array(
            0 => array(
                0 => 'boshag@example.com'
            ),
            'x-test' => array(
                0 => 'xtest@example.com',
            ),
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers pear_Vcard::getAddress
     */
    public function testGetAddress()
    {
        $actual = $this->vcard->getAddress();

        $expected = array(
            'home' => array(
                0 => array(
                    'pobox' => '',
                    'ext' => '',
                    'street' => '123 Main,Apartment 101',
                    'locality' => 'Beverly Hills',
                    'region' => 'CA',
                    'code' => '90210',
                    'country' => ''
                )
            ),
            'work' => array(
                0 => array(
                    'pobox' => '',
                    'ext' => '',
                    'street' => '123 Main,Apartment 101',
                    'locality' => 'Beverly Hills',
                    'region' => 'CA',
                    'code' => '90210',
                    'country' => ''
                )
            ),
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers pear_Vcard::getAddress
     */
    public function testGetAddressByType()
    {
        $actual = $this->vcard->getAddress(NULL, 'home');

        $expected = array(
            array(
                'pobox' => '',
                'ext' => '',
                'street' => '123 Main,Apartment 101',
                'locality' => 'Beverly Hills',
                'region' => 'CA',
                'code' => '90210',
                'country' => ''
            ),
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers pear_Vcard::getAddress
     */
    public function testGetAddressPart()
    {
        $actual = $this->vcard->getAddress('locality');

        $expected = array(
            'home' => array(
                0 => 'Beverly Hills',
            ),
            'work' => array(
                0 => 'Beverly Hills',
            ),
        );

        $this->assertEquals($expected, $actual);
    }


    /**
     * @covers pear_Vcard::getAddress
     */
    public function testGetAddressPartByType()
    {
        $actual = $this->vcard->getAddress('locality', 'home');

        $expected = array(
            0 => 'Beverly Hills',
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers pear_Vcard::getAddressLabel
     */
    public function testGetAddressLabel()
    {
        $actual = $this->vcard->getAddressLabel();

        $expected = array(
            'dom' => array(
                0 => "Mr.John Q. Public, Esq.\nMail Drop: TNE QB\n123 Main Street\nAny Town, CA  91921-1234\nU.S.A"
            ),
            'home' => array(
                0 => "Mr.John Q. Public, Esq.\nMail Drop: TNE QB\n123 Main Street\nAny Town, CA  91921-1234\nU.S.A"
            ),
            'postal' => array(
                0 => "Mr.John Q. Public, Esq.\nMail Drop: TNE QB\n123 Main Street\nAny Town, CA  91921-1234\nU.S.A"
            ),
            'parcel' => array(
                0 => "Mr.John Q. Public, Esq.\nMail Drop: TNE QB\n123 Main Street\nAny Town, CA  91921-1234\nU.S.A"
            ),
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers pear_Vcard::getAddressLabel
     */
    public function testGetAddressLabelByType()
    {
        $actual = $this->vcard->getAddressLabel('home');

        $expected = array(
            0 => "Mr.John Q. Public, Esq.\nMail Drop: TNE QB\n123 Main Street\nAny Town, CA  91921-1234\nU.S.A"
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers pear_Vcard::getOrganisation
     */
    public function testGetOrganisation()
    {
        $actual = $this->vcard->getOrganisation();

        $this->assertEquals('ABC, Inc.', $actual);
    }

    /**
     * @covers pear_Vcard::getOrganisation
     */
    public function testFullOrganisation()
    {
        $actual = $this->vcard->getOrganisation(TRUE);

        $expected = array(
            0 => 'ABC, Inc.',
            1 => 'North American Division',
            2 => 'Marketing',
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers pear_Vcard::getJobTitle
     */
    public function testGetJobTitle()
    {
        $actual = $this->vcard->getJobTitle();

        $this->assertEquals('Shrimp Man', $actual);

        $actual = $this->vcards[2]->getJobTitle();

        $this->assertEquals('Director, Research and Development', $actual);
    }

    /**
     * @covers pear_Vcard::getRole
     */
    public function testGetRole()
    {
        $actual = $this->vcards[2]->getRole();

        $this->assertEquals('Programmer', $actual);
    }

    /**
     * @covers pear_Vcard::parseFile
     * @expectedException core_exception_Expect
     */
    public function testParseMissingFile()
    {
       pear_Vcard::parseFile('missing_file.vcf');
    }

    /**
     * @covers pear_Vcard::parseString
     * @todo   Implement testParseString().
     */
    public function testParseString()
    {
        $str = <<<EOT
BEGIN:VCARD
VERSION:3.0
EMAIL:boshag@example.com
EMAIL;TYPE=x-test:xtest@example.com
TITLE:Director\, Research and Development
ROLE:Programmer
END:VCARD
EOT;
        $vcards = pear_Vcard::parseString($str);

        $this->assertInternalType('array', $vcards);
        $this->assertTrue(count($vcards) == 1);

        /* @var $vcard pear_Vcard */
        $vcard = $vcards[0];

        $this->assertEquals('3.0', $vcard->getVersion());
        $this->assertEquals(array(array('boshag@example.com'), 'x-test' => array('xtest@example.com')), $vcard->getEmails());
        $this->assertEquals('Director, Research and Development', $vcard->getJobTitle());
        $this->assertEquals('Programmer', $vcard->getRole());
    }

    /**
     * @covers pear_Vcard::createEmpty
     */
    public function testCreateEmpty()
    {
        $empty = pear_Vcard::createEmpty();

        $this->assertInstanceOf('pear_Vcard', $empty);
    }

    /**
     * @covers pear_Vcard::setFormattedName
     */
    public function testSetFormattedName()
    {
        $vcard = pear_Vcard::createEmpty();
        $vcard->setFormattedName('Test Name');
    }

    /**
     * @covers pear_Vcard::setName
     */
    public function testSetName()
    {
        $vcard = pear_Vcard::createEmpty();
        $vcard->setName(array('prefix'=>'Mr', 'surname'=>'Gates'));
    }

    /**
     * @covers pear_Vcard::setBday
     */
    public function testSetBday()
    {
        $vcard = pear_Vcard::createEmpty();
        $vcard->setBday('1972-03-25');
    }

    /**
     * @covers pear_Vcard::addAddress
     */
    public function testAddAddress()
    {
        $vcard = pear_Vcard::createEmpty();

        $vcard->addAddress(
            array(
                'street'   => 'street',
                'locality' => 'locality',
                'code'     => 'code',
                'country'  => 'country',
            ),
            array(
                'TYPE' => array('HOME')
            )
        );

    }

    /**
     * @covers pear_Vcard::addAddressLabel
     */
    public function testAddAddressLabel()
    {
        $vcard = pear_Vcard::createEmpty();

        $vcard->addAddressLabel("This is address label", array('TYPE' => 'HOME'));
    }

    /**
     * @covers pear_Vcard::addTel
     */
    public function testAddTel()
    {
        $vcard = pear_Vcard::createEmpty();

        $vcard->addTel("123463874", array('TYPE' => 'HOME'));
    }

    /**
     * @covers pear_Vcard::addEmail
     */
    public function testAddEmail()
    {
        $vcard = pear_Vcard::createEmpty();

        $vcard->addEmail("test@example.org", array('TYPE' => array('HOME', 'WORK')));
    }

    /**
     * @covers pear_Vcard::setOrganisation
     */
    public function testSetOrganisation()
    {
        $vcard = pear_Vcard::createEmpty();

        $vcard->setOrganisation("Acme, Inc.");
    }

    /**
     * @covers pear_Vcard::setPhotoUrl
     */
    public function testSetPhotoUrl()
    {
        $vcard = pear_Vcard::createEmpty();

        $vcard->setPhotoUrl("http://example.org/photos/photo.jpg");
    }

    /**
     * @covers pear_Vcard::setNote
     */
    public function testSetNote()
    {
        $vcard = pear_Vcard::createEmpty();

        $vcard->setNote("This is a test");
    }

    /**
     * @covers pear_Vcard::__toString
     */
    public function test__toString()
    {
        $vcard = pear_Vcard::createEmpty();

        $vcard->setFormattedName('Bill Gates');
        $vcard->setNote("This is a test");
        $vcard->setName(array('prefix' => 'Mr.'));
        $vcard->setName(array('suffix' => 'III'));

        $this->assertInternalType('string', (string)$vcard);
    }
}
